angle = 90,
hjust = -0.1,
vjust = 0.5
)
) +
publication_theme +
theme(
axis.text.y = element_text(size = 8),
panel.grid = element_blank(),
axis.line.x = element_line(color = "black", linewidth = 0.5)
)
),
matrix = intersection_matrix(
geom = geom_point(size = 3),
segment = geom_segment(linewidth = 0.8)
),
queries = list(
# Color the bars on the ratio plot
upset_query(intersect = c("SW_DPGP_cluster_3", "WGCNA_royalblue"), color = NA, fill = "deepskyblue", only_components = 'Intersection ratio'),
# Color the dots on the matrix graph
upset_query(
intersect = c("SW_DPGP_cluster_3", "WGCNA_royalblue"),
color = "deepskyblue",
fill = "deepskyblue",
only_components = 'intersections_matrix'
)
),
wrap = TRUE
)
return(complex_upset_plot)
}
# get intersections
# Function to extract genes from the exact intersections shown in the UpSet plot
get_upset_intersections <- function(df_binary, binary_columns, min_size = min_int_size) {
# Initialize results
intersection_counts <- data.frame(
Sets = character(),
Gene_Count = numeric(),
Gene_List = character(),
stringsAsFactors = FALSE
)
# Get unique patterns
gene_patterns <- df_binary %>%
dplyr::select(Gene.Symbol, all_of(binary_columns)) %>%
group_by(across(all_of(binary_columns))) %>%
summarise(
genes = paste(sort(Gene.Symbol), collapse = ", "),
count = n(),
.groups = 'drop'
)
# For each pattern
for(i in 1:nrow(gene_patterns)) {
pattern <- gene_patterns[i,]
sets_in_pattern <- names(pattern)[which(unlist(pattern[1,binary_columns]) == TRUE)]
if(length(sets_in_pattern) >= 1) {
intersection_counts <- rbind(intersection_counts, data.frame(
Sets = paste(sort(sets_in_pattern), collapse = " & "),
Gene_Count = pattern$count,
Gene_List = pattern$genes,
stringsAsFactors = FALSE
))
}
}
# Sort by gene count
intersection_counts <- intersection_counts %>%
arrange(desc(Gene_Count)) %>%
filter(Gene_Count >= min_size)  # Use min_size parameter
# Save individual gene lists
cat("Saving gene lists for", nrow(intersection_counts), "intersections...\n")
dir.create("output/gene_lists", showWarnings = FALSE, recursive = TRUE)
for(i in 1:nrow(intersection_counts)) {
clean_name <- gsub(" & ", "_", intersection_counts$Sets[i])
clean_name <- gsub("[^[:alnum:]_]", "", clean_name)
file_name <- file.path("output/gene_lists", paste0(clean_name, "_genes.txt"))
writeLines(unlist(strsplit(intersection_counts$Gene_List[i], ", ")), file_name)
}
# Save summary
write.csv(intersection_counts, "output/intersection_summary.csv", row.names = FALSE)
cat("Done! Found", nrow(intersection_counts), "intersections\n")
return(intersection_counts)
}
##########################################
##### Generate plots
##########################################
# Create enhanced plot
enhanced_plot <- create_enhanced_upset(df_binary, binary_columns)
print(enhanced_plot)
ggsave("output/enhanced_WGCNA_DPGP_upset.svg",
plot = enhanced_plot,
device = "svg",
width = 12,
height = 12,
dpi = 300)
# Get intersection data
intersection_data <- get_upset_intersections(df_binary, binary_columns) #this function saves the intersection analysis in the output folder
#############################
# LIBRARIES AND FUNCTIONS
#############################
library(ComplexHeatmap)
library(tidyverse)
library(circlize)
library(viridis)
library(RColorBrewer)
process_numeric_columns <- function(df) {
numeric_cols <- grep("logFC|logCPM|F|PValue|FDR", names(df))
df[numeric_cols] <- lapply(df[numeric_cols], as.numeric)
return(df)
}
#############################
# DATA IMPORT AND PROCESSING
#############################
# # manually created gene set list as a tsv to the data folder
genesets <- read.delim2("data/gene_sets_MK_curated_tabdelim_focused.txt") # manually curated gene set lists
genesets <- genesets[,1:3] # drop the extra column
sum(duplicated(genesets$Gene)) # no duplicate gene rows
# Import and merge expression data
gene_table <- inner_join(
read.delim2("data/final_data_matrix_nocutoffs_SW.txt"),
read.delim2("data/final_data_matrix_nocutoffs_Tg.txt"),
by = "genes"
) %>%
rename(
"logFC_1h_SW" = "logFC.time1h.treatSW",
"logFC_2h_SW" = "logFC.time2h.treatSW",
"logFC_6h_SW" = "logFC.time6h.treatSW",
"logFC_24h_SW" = "logFC.time24h.treatSW",
"logCPM_SW" = "logCPM.x",
"F_SW" = "F.x",
"PValue_SW" = "PValue.x",
"FDR_SW" = "FDR.x",
"logFC_1h_Tg" = "logFC.time1h.treatTg",
"logFC_2h_Tg" = "logFC.time2h.treatTg",
"logFC_6h_Tg" = "logFC.time6h.treatTg",
"logFC_24h_Tg" = "logFC.time24h.treatTg",
"logCPM_Tg" = "logCPM.y",
"F_Tg" = "F.y",
"PValue_Tg" = "PValue.y",
"FDR_Tg" = "FDR.y"
) %>%
process_numeric_columns()
# Function to process gene expression data and create categorized dataset
create_categorized_dataset <- function(gene_table, genesets) {
# Convert all numeric columns from character to numeric
numeric_columns <- grep("logFC|logCPM|F|PValue|FDR", names(gene_table))
gene_table[numeric_columns] <- lapply(gene_table[numeric_columns], function(x) as.numeric(x))
# Ensure genes column is character
gene_table$genes <- as.character(gene_table$genes)
genesets$Gene <- as.character(genesets$Gene)
# Filter gene_table to only include genes that are in genesets
categorized_genes <- gene_table %>%
filter(genes %in% genesets$Gene)
# Add category information
categorized_genes <- categorized_genes %>%
left_join(genesets %>% select(Gene, Category_1, Description), by = c("genes" = "Gene"))
return(categorized_genes)
}
# Take the genes from the gene_table and pulls the logFC data and merges it with the three categories from genesets.
categorized_genes <- create_categorized_dataset(gene_table, genesets)
# Focus the table on only genes that are significantly altered in at least one condition
categorized_genes_sig <- categorized_genes %>%
filter(FDR_SW < 0.05 | FDR_Tg < 0.05) %>%
arrange(Category_1)
#############################
# PREPARE HEATMAP DATA
#############################
list(unique(categorized_genes_sig$Category_1))
# Create a named vector of colors for the pathways
pathway_colors <- c(
"Autophagy" = "#E41A1C",                                      # Red
"Beta cell Ca2+ and K+ ion handling" = "#377EB8",            # Blue
"Beta cell TFs" = "#4DAF4A",                                 # Green
"Beta cell TFs - CHI and MODY" = "#74C476",                 # Lighter Green
"Cell death / Survival" = "#984EA3",                        # Purple
"Disallowed Beta-cell genes" = "#FF7F00",                   # Orange
"Exosome" = "#FDB462",                                      # Light Orange
"Glycolysis & TCA cycle" = "#FFFF33",                      # Yellow
"Immediate Early Response" = "#A65628",                     # Brown
"Insulin Processing & Secretion" = "#F781BF",              # Pink
"Insulin Processing & Secretion  - CHI and MODY" = "#FB9A99", # Light Red
"Purine Biosynthesis" = "#66C2A5",                         # Turquoise
"Redox Stress" = "#FC8D62",                                # Coral
"Serine/1C metabolism" = "#8DA0CB",                        # Light Blue
"UPR-ER" = "#E78AC3",                                      # Rose
"UPR-mito" = "#A6D854",                                    # Light Green
"UPR_ATF6" = "#B3CDE3",                                    # Pale Blue
"UPR_ERAD" = "#CCEBC5",                                    # Pale Green
"UPR_IRE1/XBP1s" = "#DECBE4",                             # Pale Purple
"UPR_PERK" = "#FED9A6"                                     # Pale Orange
)
# Create matrix for SW time course
sw_matrix <- categorized_genes_sig %>%
select(starts_with("logFC") & contains("SW")) %>%
as.matrix()
rownames(sw_matrix) <- categorized_genes_sig$genes
colnames(sw_matrix) <- c("1h", "2h", "6h", "24h")
# Create matrix for Tg time course
tg_matrix <- categorized_genes_sig %>%
select(starts_with("logFC") & contains("Tg")) %>%
as.matrix()
rownames(tg_matrix) <- categorized_genes_sig$genes
colnames(tg_matrix) <- c("1h", "2h", "6h", "24h")
# Create annotation for categories with smaller font size
ha_left = rowAnnotation(
Category_1 = categorized_genes_sig$Category_1,
show_legend = TRUE,
annotation_name_side = "top",
gp = gpar(col = NA, fontsize = 6),
annotation_label = "Pathway",
col = list(Category_1 = pathway_colors),  # Specify the colors
annotation_legend_param = list(
Category_1 = list(
title = "Pathway",
title_gp = gpar(fontsize = 10),
labels_gp = gpar(fontsize = 8),
title_position = "topcenter",
labels_rot = 0,
nrow = 7  # Adjust the number of rows in the legend
)
)
)
# Create significance indicators
sw_sig <- ifelse(categorized_genes_sig$FDR_SW < 0.05, "★", "")
tg_sig <- ifelse(categorized_genes_sig$FDR_Tg < 0.05, "★", "")
# Custom purple to green
col_fun = colorRamp2(
c(min(c(sw_matrix, tg_matrix)), 0, max(c(sw_matrix, tg_matrix))),
c("#762a83", "#f7f7f7", "#1b7837")
)
# only split by cat 1
split = factor(categorized_genes_sig$Category_1)
# heatmap creation
ht_list = Heatmap(sw_matrix,
name = "SW logFC",
col = col_fun,
cluster_rows = TRUE,
cluster_columns = FALSE,
show_row_dend = FALSE,
show_column_dend = FALSE,
row_split = split,
left_annotation = ha_left,
row_names_side = "left",
column_title = "SW",
column_names_rot = 0,
column_names_side = "top",
column_names_centered = TRUE,  # Center the column names
row_names_gp = gpar(fontsize = 8),
height = unit(length(categorized_genes_sig$genes) * 12, "points"),
column_names_gp = gpar(fontsize = 10),
width = unit(3, "cm"),
row_gap = unit(5, "mm")) +
rowAnnotation(
SW_sig = anno_text(sw_sig,
gp = gpar(fontsize = 10),
just = "center"),
show_annotation_name = FALSE,
gp = gpar(col = NA),
width = unit(2, "mm")
) +
Heatmap(tg_matrix,
name = "Tg logFC",
col = col_fun,
cluster_rows = TRUE,
cluster_columns = FALSE,
show_row_dend = FALSE,
show_column_dend = FALSE,
row_split = split,
column_title = "Tg",
show_row_names = FALSE,
column_names_rot = 0,
column_names_side = "top",
column_names_centered = TRUE,  # Center the column names
column_names_gp = gpar(fontsize = 10),
width = unit(3, "cm"),
row_gap = unit(5, "mm")) +
rowAnnotation(
Tg_sig = anno_text(tg_sig,
gp = gpar(fontsize = 10),
just = "center"),
show_annotation_name = FALSE,
gp = gpar(col = NA),
width = unit(2, "mm")
)
# Calculate appropriate PDF dimensions
pdf_height = (length(categorized_genes_sig$genes) * 12 / 72) + 3  # convert points to inches and add padding
pdf_width = 12  # standard width, adjust if needed
# Display in R Studio
draw(ht_list, ht_gap = unit(2, "mm"))
# Save to PDF
pdf(file = "output/timecourse_heatmap.pdf", height = pdf_height, width = pdf_width)
draw(ht_list, ht_gap = unit(2, "mm"))
dev.off()
# After export, use Adobe Illustrator to make final touches, including:
# 1. Fix the category names and the sizes of the labels, add greek beta, make 2+ superscript, etc.
# 2. Move the bottom part of the heat map to the right hand side, copy the column labels and paste them.
# 3. Move the legend, delete the extra log2FC panel. just call it log2FC.
#############################
# Compare signficant genes between SW and Tg timecourse matrices
#############################
# Load required package for enhanced graphics
library(VennDiagram)
library(RColorBrewer)
# Create sets of significant genes for each treatment
sig_SW <- gene_table$genes[
gene_table$FDR_SW < 0.05 &
(abs(gene_table$logFC_1h_SW) > 1 |
abs(gene_table$logFC_2h_SW) > 1 |
abs(gene_table$logFC_6h_SW) > 1 |
abs(gene_table$logFC_24h_SW) > 1)
]
sig_Tg <- gene_table$genes[
gene_table$FDR_Tg < 0.05 &
(abs(gene_table$logFC_1h_Tg) > 1 |
abs(gene_table$logFC_2h_Tg) > 1 |
abs(gene_table$logFC_6h_Tg) > 1 |
abs(gene_table$logFC_24h_Tg) > 1)
]
# Calculate sizes for Venn diagram
n_SW <- length(sig_SW)
n_Tg <- length(sig_Tg)
n_both <- length(intersect(sig_SW, sig_Tg))
# Set global parameters
futuraFont <- "sans"
sw_color <- "#FFB6B6"  # Light red
tg_color <- "#B6FFB6"  # Light green
# Create enhanced Venn diagram
venn.plot <- draw.pairwise.venn(
area1 = n_SW,
area2 = n_Tg,
cross.area = n_both,
category = c("SW", "Tg"),
# Colors and fill
fill = c(sw_color, tg_color),
alpha = 0.7,
col = "white",              # Remove borders
# Text formatting
cat.col = "black",
cat.cex = 3,
cat.pos = c(180, 180),     # Position labels at bottom
cat.dist = -0.02,          # Adjust label distance
cat.fontfamily = futuraFont,
# Number formatting
cex = 2.5,
fontfamily = futuraFont,
fontface = "plain",
# Circle properties
lwd = 0,                   # No borders
# Size control
width = 0.4,
height = 0.25,            # Make more elliptical
margin = 0.2,
euler.d = TRUE,
scaled = TRUE
)
# Save as high-resolution PDF
pdf(file = "output/significant_genes_venn_enhanced.pdf",
width = 8,
height = 5,
useDingbats = FALSE)
grid.draw(venn.plot)
grid.text("edgeR DEGs\n(|log2FC| > 1, FDR < 0.05)",
x = 0.5,    # x position (0.5 is center)
y = 0.9,    # y position (adjust this to move title up/down)
gp = gpar(fontsize = 14, fontface = "bold"))  # Adjust size and style
dev.off()
#############################
# LIBRARIES AND FUNCTIONS
#############################
suppressPackageStartupMessages(library(ComplexHeatmap))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(circlize))
suppressPackageStartupMessages(library(viridis))
suppressPackageStartupMessages(library(RColorBrewer))
# script to replot enrichR GO analysis into a vectorized bar chart for figrue preparation
suppressPackageStartupMessages(library(tidyverse))
WGCNA <- read.delim("data/WGCNA analysis.txt", header=T)
colnames(WGCNA)
WGCNA_royalblue <- WGCNA %>% filter(module == "royalblue")
colnames(WGCNA_royalblue) <- c("module", "gene", "kME_Module")
SW <- read.delim("data/output_SW_optimal_clustering.txt", header=T)
colnames(SW)
SW_cl3 <- SW %>% filter(cluster == 3)
Tg <- read.delim("data/output_Tg_optimal_clustering.txt")
colnames(Tg)
Tg_cl1 <- Tg %>% filter(cluster == 1)
merged_royalblue_SW_cl3 <- full_join(WGCNA_royalblue, SW_cl3, by = "gene")
colnames(merged_royalblue_SW_cl3)
write.csv(merged_royalblue_SW_cl3$gene, "merged_genelist_royalblue_SW_cl3.csv")
# Used the combined gene list of royal + SW_cluster_3 to run Enrichr and saved the output to a text file
royalblue_cluster3 <- read.delim("data/2024_12_17_Enrichr_GO_Biological_Process_2023_table_SWcl3_WGCNAroyalblue.txt", header=T) # This is the output from enrichr for the combined gene list of royalblue and SW cluster 3
colnames(royalblue_cluster3)
royalblue_cluster3 <- royalblue_cluster3 %>%
separate(Term, into = c("Term", "GO_ID"), sep = "\\(")
royalblue_cluster3 <- royalblue_cluster3[, c(1,5,9)]
royalblue_cluster3$neg_log10FDR <- -log10(royalblue_cluster3$Adjusted.P.value)
colnames(royalblue_cluster3)
topGO_merged <- royalblue_cluster3 %>%
arrange(desc(neg_log10FDR)) %>%  # Sort by Combined.Score in descending order
head(10)
# Calculate base font size relative to intended output size
base_font_size <- 14 * (10/7) * 0.8  # Scaled based on your height of 10 inches
plot <- ggplot(topGO_merged, aes(x = reorder(Term, neg_log10FDR), y = neg_log10FDR, fill = Combined.Score)) +
geom_bar(stat = "identity", width = 0.8) +
scale_fill_gradient(low = "lightblue", high = "darkblue",
name = "Score",
breaks = c(min(topGO_merged$Combined.Score),
500,
max(topGO_merged$Combined.Score)),
labels = function(x) format(round(x, 1), big.mark = ",")) +
labs(x = "GO Pathway", y = "-log10(FDR)",
title = "GO Biological Process",
subtitle = "WGCNA_royalblue + SW_DPGP_cluster_3") +
coord_flip() +
scale_y_continuous(expand = c(0, 0)) +
theme_minimal() +
theme(
# Scale font sizes relative to output dimensions
axis.text.y = element_text(size = base_font_size),
axis.text.x = element_text(size = base_font_size + 2),
plot.title = element_text(hjust = 0.5, size = base_font_size + 2, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = base_font_size, face = "italic"),
axis.title = element_text(size = base_font_size),
legend.position = "right",
legend.title = element_text(size = base_font_size),
legend.text = element_text(size = base_font_size - 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, color = "black"),
panel.border = element_rect(color = "black", size = 0.5, fill = NA),
# Adjust margins relative to output size
plot.margin = margin(t = 20, r = 20, b = 20, l = 120),
aspect.ratio = 0.67  # This is 10/15 to match your output dimensions
)
print(plot)
ggsave(plot=plot, "royalblue + Cluster 3.tiff", dpi=300, width = 7.5, height = 5)
ggsave(filename = "royalblue + Cluster 3.pdf",
plot = plot,
device = "pdf",
width = 15,
height = 10,
units = "in",
dpi = 300,
scale = 1)
# script to replot enrichR GO analysis into a vectorized bar chart for figrue preparation
suppressPackageStartupMessages(library(tidyverse))
WGCNA <- read.delim("data/WGCNA analysis.txt", header=T)
colnames(WGCNA)
WGCNA_royalblue <- WGCNA %>% filter(module == "royalblue")
colnames(WGCNA_royalblue) <- c("module", "gene", "kME_Module")
SW <- read.delim("data/output_SW_optimal_clustering.txt", header=T)
colnames(SW)
SW_cl3 <- SW %>% filter(cluster == 3)
Tg <- read.delim("data/output_Tg_optimal_clustering.txt")
colnames(Tg)
Tg_cl1 <- Tg %>% filter(cluster == 1)
merged_royalblue_SW_cl3 <- full_join(WGCNA_royalblue, SW_cl3, by = "gene")
colnames(merged_royalblue_SW_cl3)
write.csv(merged_royalblue_SW_cl3$gene, "merged_genelist_royalblue_SW_cl3.csv")
# Used the combined gene list of royal + SW_cluster_3 to run Enrichr and saved the output to a text file
royalblue_cluster3 <- read.delim("data/2024_12_17_Enrichr_GO_Biological_Process_2023_table_SWcl3_WGCNAroyalblue.txt", header=T) # This is the output from enrichr for the combined gene list of royalblue and SW cluster 3
colnames(royalblue_cluster3)
royalblue_cluster3 <- royalblue_cluster3 %>%
separate(Term, into = c("Term", "GO_ID"), sep = "\\(")
royalblue_cluster3 <- royalblue_cluster3[, c(1,5,9)]
royalblue_cluster3$neg_log10FDR <- -log10(royalblue_cluster3$Adjusted.P.value)
colnames(royalblue_cluster3)
topGO_merged <- royalblue_cluster3 %>%
arrange(desc(neg_log10FDR)) %>%  # Sort by Combined.Score in descending order
head(10)
# Calculate base font size relative to intended output size
base_font_size <- 14 * (10/7) * 0.8  # Scaled based on your height of 10 inches
plot <- ggplot(topGO_merged, aes(x = reorder(Term, neg_log10FDR), y = neg_log10FDR, fill = Combined.Score)) +
geom_bar(stat = "identity", width = 0.8) +
scale_fill_gradient(low = "lightblue", high = "darkblue",
name = "Score",
breaks = c(min(topGO_merged$Combined.Score),
500,
max(topGO_merged$Combined.Score)),
labels = function(x) format(round(x, 1), big.mark = ",")) +
labs(x = "GO Pathway", y = "-log10(FDR)",
title = "GO Biological Process",
subtitle = "WGCNA_royalblue + SW_DPGP_cluster_3") +
coord_flip() +
scale_y_continuous(expand = c(0, 0)) +
theme_minimal() +
theme(
# Scale font sizes relative to output dimensions
axis.text.y = element_text(size = base_font_size),
axis.text.x = element_text(size = base_font_size + 2),
plot.title = element_text(hjust = 0.5, size = base_font_size + 2, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = base_font_size, face = "italic"),
axis.title = element_text(size = base_font_size),
legend.position = "right",
legend.title = element_text(size = base_font_size),
legend.text = element_text(size = base_font_size - 1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(linewidth = 0.5, color = "black"),
panel.border = element_rect(color = "black", linewidth = 0.5, fill = NA),
# Adjust margins relative to output size
plot.margin = margin(t = 20, r = 20, b = 20, l = 120),
aspect.ratio = 0.67  # This is 10/15 to match your output dimensions
)
print(plot)
ggsave(plot=plot, "royalblue + Cluster 3.tiff", dpi=300, width = 7.5, height = 5)
ggsave(filename = "royalblue + Cluster 3.pdf",
plot = plot,
device = "pdf",
width = 15,
height = 10,
units = "in",
dpi = 300,
scale = 1)
